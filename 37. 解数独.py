import time

hard = [
    ["8", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", "3", "6", ".", ".", ".", ".", "."],
    [".", "7", ".", ".", "9", ".", "2", ".", "."],
    [".", "5", ".", ".", ".", "7", ".", ".", "."],
    [".", ".", ".", ".", "4", "5", "7", ".", "."],
    [".", ".", ".", "1", ".", ".", ".", "3", "."],
    [".", ".", "1", ".", ".", ".", ".", "6", "8"],
    [".", ".", "8", "5", ".", ".", ".", "1", "."],
    [".", "9", ".", ".", ".", ".", "4", ".", "."],
]
b = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]
a = [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."],
     [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
     ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
     [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"],
     [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
INDEX = {
    0: {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3},
    1: {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3},
    2: {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3},
    3: {0: 4, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 6, 7: 6, 8: 6},
    4: {0: 4, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 6, 7: 6, 8: 6},
    5: {0: 4, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 6, 7: 6, 8: 6},
    6: {0: 7, 1: 7, 2: 7, 3: 8, 4: 8, 5: 8, 6: 9, 7: 9, 8: 9},
    7: {0: 7, 1: 7, 2: 7, 3: 8, 4: 8, 5: 8, 6: 9, 7: 9, 8: 9},
    8: {0: 7, 1: 7, 2: 7, 3: 8, 4: 8, 5: 8, 6: 9, 7: 9, 8: 9},
}

from pprint import pprint


class Solution:
    def solveSudoku1(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        left = {
            1: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            2: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            3: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            4: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            5: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            6: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            7: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            8: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            9: {'1', '2', '3', '4', '5', '6', '7', '8', '9'}
        }
        left_row = {
            0: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            1: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            2: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            3: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            4: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            5: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            6: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            7: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            8: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
        }
        left_line = {
            0: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            1: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            2: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            3: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            4: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            5: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            6: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            7: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
            8: {'1', '2', '3', '4', '5', '6', '7', '8', '9'},
        }

        live = []

        def _write(num, row_num, line_num):
            left_row[row_num].remove(num)
            left_line[line_num].remove(num)
            left[INDEX[row_num][line_num]].remove(num)

        def _input_num(num, row_num, line_num):
            board[row_num][line_num] = num
            _write(num, row_num, line_num)

        def get_all_try_num_min():
            for _row_num, row in enumerate(board):
                for _line_num, _num in enumerate(row):
                    if _num != '.':
                        _write(_num, _row_num, _line_num)
                    else:
                        n = left_row[_row_num] & left_line[_line_num] & left[INDEX[_row_num][_line_num]]
                        if len(n) == 1:
                            _num = n.pop()
                            _input_num(_num, _row_num, _line_num)
                        else:
                            live.append((_row_num, _line_num, n))
            live.sort(key=lambda x: x[2])

        get_all_try_num_min()
        print(live)
        pprint(board)
        last_board = []
        while live:
            last_live_len = len(live)  # 记录是否解决一个空

            pprint(board)
            # 如果live长度最小可填不为1
            while live[0][2] != 1:
                try_num = live[0][3].pop()
                last_board.append((board[:], live[:], last_live_len,
                                   left_row.copy(),
                                   left_line.copy(),
                                   left.copy(),
                                   ))
                (row_num, line_num, le, n) = live.pop(0)
                _input_num(try_num, row_num, line_num)
                print('try:', try_num, row_num, line_num)
                get_all_try_num_min()

            for index, (row_num, line_num, le, n) in enumerate(live):
                n = left_row[row_num] & left_line[line_num] & left[INDEX[row_num][line_num]]
                if len(n) == 1:
                    num = n.pop()
                    _input_num(num, row_num, line_num)
                    live.pop(index)

            # 如为解决，返回重试
            if last_live_len == len(live):
                board, live[:], last_live_len, left_row, left_line, left = last_board.pop()
        return board


start = time.time()

for i in range(2):
    print(Solution().solveSudoku1(hard))

print(str(time.time() - start) + "秒")
